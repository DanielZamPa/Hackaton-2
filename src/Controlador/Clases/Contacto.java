package Controlador.Clases;

import Controlador.Interfaces.Contactos;

public class Contacto implements Contactos {

    // üè† ATRIBUTOS PRIVADOS
    private String nombre;
    private String apellido;
    private String telefono;

    // üèóÔ∏è CONSTRUCTOR
    public Contacto(String nombre, String apellido, String telefono) {

        // ‚úÖ VALIDACI√ìN 1: Nombre no puede estar vac√≠o
        if (nombre == null || nombre.trim().isEmpty()) {
            // Usamos el mensaje de error de la interfaz (m√°s profesional)
            throw new IllegalArgumentException(ERROR_NOMBRE_VACIO);
        }

        // ‚úÖ VALIDACI√ìN 2: Apellido no puede estar vac√≠o
        if (apellido == null || apellido.trim().isEmpty()) {
            throw new IllegalArgumentException(ERROR_APELLIDO_VACIO);
        }

        // ‚úÖ VALIDACI√ìN 3: Tel√©fono debe tener formato correcto
        if (!esTelefonoValido(telefono)) {
            throw new IllegalArgumentException(ERROR_TELEFONO_INVALIDO);
        }

        // üéâ Si llegamos aqu√≠, TODO est√° bien, guardamos los datos
        this.nombre = nombre.trim();
        this.apellido = apellido.trim();
        this.telefono = telefono.trim();
    }

    // üìû IMPLEMENTACI√ìN del m√©todo de la interfaz
    @Override
    public boolean esTelefonoValido(String telefono) {

        // Verificar que no sea null o vac√≠o
        if (telefono == null || telefono.trim().isEmpty()) {
            return false;
        }

        telefono = telefono.trim();

        // üîç Usar las constantes de la interfaz (m√°s mantenible)
        // Crear el patr√≥n din√°micamente usando las constantes
        String patron = "^\\d{" + MIN_LONGITUD_TELEFONO + "," + MAX_LONGITUD_TELEFONO + "}$";
        return telefono.matches(patron);

        // üìù EXPLICACI√ìN DEL PATR√ìN:
        // Si MIN=7 y MAX=15, se convierte en: "^\\d{7,15}$"
        // ^ = inicio, \\d = d√≠gito, {7,15} = entre 7 y 15, $ = final
    }

    // üìÑ IMPLEMENTACI√ìN del m√©todo de la interfaz (OBLIGATORIO)
    @Override
    public String obtenerInformacion() {
        // Reutilizamos nuestro m√©todo toString() que ya ten√≠amos
        return this.toString();
    }

    // ‚úÖ IMPLEMENTACI√ìN del m√©todo de la interfaz (OBLIGATORIO)
    @Override
    public boolean esValido() {
        // Un contacto es v√°lido si tiene nombre, apellido y tel√©fono v√°lidos
        return nombre != null && !nombre.trim().isEmpty() &&
                apellido != null && !apellido.trim().isEmpty() &&
                esTelefonoValido(telefono);
    }

    // üëÅÔ∏è M√âTODOS GETTER (para "ver" la informaci√≥n privada)
    public String getNombre() {
        return nombre;
    }

    public String getApellido() {
        return apellido;
    }

    public String getTelefono() {
        return telefono;
    }

    // üîß M√âTODO SETTER para cambiar el tel√©fono
    public void setTelefono(String nuevoTelefono) {
        if (!esTelefonoValido(nuevoTelefono)) {
            throw new IllegalArgumentException(ERROR_TELEFONO_INVALIDO);
        }
        this.telefono = nuevoTelefono.trim();
    }

    // üìÑ M√âTODO TOSTRING (para mostrar el contacto bonito)
    @Override
    public String toString() {
        return nombre + " " + apellido + " - " + telefono;
    }

    // ‚öñÔ∏è M√âTODO EQUALS (para comparar si dos contactos son "iguales")
    // Dos contactos son iguales si tienen el mismo nombre y apellido (ignorando may√∫sculas).
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Contacto contacto = (Contacto) o;
        return nombre.equalsIgnoreCase(contacto.nombre) &&
               apellido.equalsIgnoreCase(contacto.apellido);
    }

    // #Ô∏è‚É£ M√âTODO HASHCODE (requerido si se sobrescribe equals)
    // Genera un c√≥digo num√©rico basado en el nombre y apellido.
    @Override
    public int hashCode() {
        // Usamos una clase de ayuda para generar un hash a partir de varios campos.
        return java.util.Objects.hash(nombre.toLowerCase(), apellido.toLowerCase());
    }
}
