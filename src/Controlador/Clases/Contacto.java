// üìÅ Archivo: Classes/Contacto.java
// üéØ Esta clase representa UN contacto individual

package Controlador.Clases;

import Controlador.Interfaces.Contactos;

// ü§ù "implements Contactos" = esta clase PROMETE cumplir el contrato de la interfaz
public class Contacto implements Contactos {

    // üè† ATRIBUTOS PRIVADOS (las "cajitas" donde guardamos la informaci√≥n)
    private String nombre;
    private String apellido;
    private String telefono;

    // üèóÔ∏è CONSTRUCTOR (el "fabricante" de contactos)
    public Contacto(String nombre, String apellido, String telefono) {

        // ‚úÖ VALIDACI√ìN 1: Nombre no puede estar vac√≠o
        if (nombre == null || nombre.trim().isEmpty()) {
            // Usamos el mensaje de error de la interfaz (m√°s profesional)
            throw new IllegalArgumentException(ERROR_NOMBRE_VACIO);
        }

        // ‚úÖ VALIDACI√ìN 2: Apellido no puede estar vac√≠o
        if (apellido == null || apellido.trim().isEmpty()) {
            throw new IllegalArgumentException(ERROR_APELLIDO_VACIO);
        }

        // ‚úÖ VALIDACI√ìN 3: Tel√©fono debe tener formato correcto
        if (!esTelefonoValido(telefono)) {
            throw new IllegalArgumentException(ERROR_TELEFONO_INVALIDO);
        }

        // üéâ Si llegamos aqu√≠, TODO est√° bien, guardamos los datos
        this.nombre = nombre.trim();
        this.apellido = apellido.trim();
        this.telefono = telefono.trim();
    }

    // üìû IMPLEMENTACI√ìN del m√©todo de la interfaz (OBLIGATORIO)
    @Override
    public boolean esTelefonoValido(String telefono) {

        // Verificar que no sea null o vac√≠o
        if (telefono == null || telefono.trim().isEmpty()) {
            return false;
        }

        telefono = telefono.trim();

        // üîç Usar las constantes de la interfaz (m√°s mantenible)
        // Crear el patr√≥n din√°micamente usando las constantes
        String patron = "^\\d{" + MIN_LONGITUD_TELEFONO + "," + MAX_LONGITUD_TELEFONO + "}$";
        return telefono.matches(patron);

        // üìù EXPLICACI√ìN DEL PATR√ìN:
        // Si MIN=7 y MAX=15, se convierte en: "^\\d{7,15}$"
        // ^ = inicio, \\d = d√≠gito, {7,15} = entre 7 y 15, $ = final
    }

    // üë• IMPLEMENTACI√ìN del m√©todo de la interfaz (OBLIGATORIO)
    @Override
    public boolean sonIguales(Object otroContacto) {
        // Reutilizamos nuestro m√©todo equals() que ya ten√≠amos
        return this.equals(otroContacto);
    }

    // üìÑ IMPLEMENTACI√ìN del m√©todo de la interfaz (OBLIGATORIO)
    @Override
    public String obtenerInformacion() {
        // Reutilizamos nuestro m√©todo toString() que ya ten√≠amos
        return this.toString();
    }

    // ‚úÖ IMPLEMENTACI√ìN del m√©todo de la interfaz (OBLIGATORIO)
    @Override
    public boolean esValido() {
        // Un contacto es v√°lido si tiene nombre, apellido y tel√©fono v√°lidos
        return nombre != null && !nombre.trim().isEmpty() &&
                apellido != null && !apellido.trim().isEmpty() &&
                esTelefonoValido(telefono);
    }

    // üëÅÔ∏è M√âTODOS GETTER (para "ver" la informaci√≥n privada)
    public String getNombre() {
        return nombre;
    }

    public String getApellido() {
        return apellido;
    }

    public String getTelefono() {
        return telefono;
    }

    // üîß M√âTODO SETTER para cambiar el tel√©fono
    public void setTelefono(String nuevoTelefono) {
        if (!esTelefonoValido(nuevoTelefono)) {
            throw new IllegalArgumentException(ERROR_TELEFONO_INVALIDO);
        }
        this.telefono = nuevoTelefono.trim();
    }

    // ‚öñÔ∏è M√âTODO EQUALS (para comparar contactos)
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;

        Contacto otroContacto = (Contacto) obj;

        // Comparar nombre y apellido sin importar may√∫sculas/min√∫sculas
        return this.nombre.equalsIgnoreCase(otroContacto.nombre) &&
                this.apellido.equalsIgnoreCase(otroContacto.apellido);
    }

    // üè∑Ô∏è M√âTODO HASHCODE (necesario con equals)
    @Override
    public int hashCode() {
        return (nombre.toLowerCase() + apellido.toLowerCase()).hashCode();
    }

    // üìÑ M√âTODO TOSTRING (para mostrar el contacto bonito)
    @Override
    public String toString() {
        return nombre + " " + apellido + " - " + telefono;
    }
}
